//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class profileapplicationEntities : DbContext
    {
        public profileapplicationEntities()
            : base("name=profileapplicationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<country_table> country_table { get; set; }
        public virtual DbSet<state_table> state_table { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<note> notes { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual ObjectResult<getData_Result> getData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getData_Result>("getData");
        }
    
        public virtual ObjectResult<getStates_Result> getStates(Nullable<int> stateId)
        {
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("stateId", stateId) :
                new ObjectParameter("stateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStates_Result>("getStates", stateIdParameter);
        }
    
        public virtual ObjectResult<getStatesFromCountryId_Result> getStatesFromCountryId(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStatesFromCountryId_Result>("getStatesFromCountryId", countryIDParameter);
        }
    }
}
